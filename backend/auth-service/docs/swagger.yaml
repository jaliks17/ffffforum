basePath: /
definitions:
  controller.SignInRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controller.SignUpRequest:
    properties:
      password:
        minLength: 8
        type: string
      role:
        enum:
        - user
        - admin
        type: string
      username:
        minLength: 3
        type: string
    required:
    - password
    - role
    - username
    type: object
  entity.ErrorResponse:
    properties:
      error:
        example: invalid request
        type: string
    type: object
  entity.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: This is an authentication and authorization microservice.
  title: Auth Microservice API
  version: "1.0"
paths:
  /api/v1/auth/signin:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя по email и паролю
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: access_token, refresh_token, user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Вход в систему
      tags:
      - Auth
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Создает новую учетную запись пользователя
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: id
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - Auth
  /api/v1/auth/users/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Получить профиль
      tags:
      - Auth
  /api/v1/auth/validate:
    get:
      description: Валидирует JWT токен
      produces:
      - application/json
      responses:
        "200":
          description: user_id
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Проверить токен
      tags:
      - Auth
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
